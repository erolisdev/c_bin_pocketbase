	e.Router.GET("/orders1", func(e *core.RequestEvent) error {
				// SQL sorgusunu kur
				var orders []OrderResponse

				// 1. Tüm order_infos kayıtlarını çek
				// var rawOrders []models.Record

				rawOrders := []*core.Record{}

				err := app.RecordQuery("order_infos").
					Select("order_infos.*").
					OrderBy("created DESC").
					Limit(100).
					All(&rawOrders)

				if err != nil {
					return apis.NewBadRequestError("Order verileri alınamadı "+err.Error(), err)
				}

				// 2. Her order için ilişkili verileri ekle
				for _, rec := range rawOrders {
					order := OrderResponse{
						Id:         rec.GetString("id"),
						Created:    rec.GetString("created"),
						Updated:    rec.GetString("updated"),
						Status:     rec.GetString("status"),
						OrderNote:  rec.GetString("orderNote"),
						OrderTotal: rec.GetInt("orderTotal"),
					}

					// Customer
					customerRec, _ := app.FindRecordById("customers", rec.GetString("customer"))
					if customerRec != nil {
						order.Customer = customerRec.PublicExport()
					}

					// Address
					addressRec, _ := app.FindRecordById("shipping_address", rec.GetString("address"))
					if addressRec != nil {
						order.ShippingAddress = addressRec.PublicExport()
					}

					payments, _ := app.FindAllRecords("payments",
						dbx.NewExp("[order] = {:orderId}", dbx.Params{"orderId": rec.Id}),
					)

					for _, p := range payments {
						order.Payments = append(order.Payments, p.PublicExport())
					}

					// Order Items

					items, errItem := app.FindAllRecords("order_items",
						dbx.NewExp("[order] = {:orderId}", dbx.Params{"orderId": rec.Id}),
					)
					if errItem != nil {
						log.Println("Error: ", errItem)
					}
					// log.Println("items: ", items)
					for _, i := range items {
						log.Println("item: ", i.PublicExport())
						order.OrderItems = append(order.OrderItems, i.PublicExport())
					}

					orders = append(orders, order)
				}

				return e.JSON(http.StatusOK, orders)

			})

			e.Router.GET("/orders2", func(e *core.RequestEvent) error {
				// SQL sorgusunu kur
				var orders []OrderResponse

				// 1. Tüm order_infos kayıtlarını çek
				// var rawOrders []models.Record

				records := []*core.Record{}

				err := app.RecordQuery("order_infos").
					Select("order_infos.*").
					OrderBy("created DESC").
					Limit(100).
					All(&records)

				if err != nil {
					return apis.NewBadRequestError("Order verileri alınamadı "+err.Error(), err)
				}

				errs := app.ExpandRecords(records, []string{
					"customer",              // single relation
					"address",               // single relation
					"payments_via_order",    // multiple relation
					"order_items_via_order", // multiple relation
				}, nil)

				if len(errs) > 0 {
					return apis.NewBadRequestError("Order verileri alınamadı: %v", errs)
				}

				// 2. Her order için ilişkili verileri ekle
				for _, rec := range records {
					order := OrderResponse{
						Id:         rec.GetString("id"),
						Created:    rec.GetString("created"),
						Updated:    rec.GetString("updated"),
						Status:     rec.GetString("status"),
						OrderNote:  rec.GetString("orderNote"),
						OrderTotal: rec.GetInt("orderTotal"),
					}

					// log.Println("record: : ", rec.PublicExport())

					customer := rec.ExpandedOne("customer")
					order.Customer = customer.PublicExport()

					address := rec.ExpandedOne("address")
					order.ShippingAddress = address.PublicExport()

					payments := rec.ExpandedAll("payments_via_order")
					for _, p := range payments {
						order.Payments = append(order.Payments, p.PublicExport())
					}

					items := rec.ExpandedAll("order_items_via_order")
					for _, i := range items {
						order.OrderItems = append(order.OrderItems, i.PublicExport())
					}

					orders = append(orders, order)
				}

				return e.JSON(http.StatusOK, orders)

			})

            			e.Router.GET("/hello/{name}", func(e *core.RequestEvent) error {

				name := e.Request.PathValue("name")
				envs := "envirenonments:\n"

				for _, env := range os.Environ() {
					envs += env + "\n"
				}

				return e.String(http.StatusOK, "Hello "+name+"\n"+envs)
			})