// Autogenerated by github.com/snonky/pocketbase-gogen. Do not edit.
package generated

import (
	"github.com/pocketbase/pocketbase/core"
	"github.com/pocketbase/pocketbase/tools/types"
)

type Users struct {
	core.BaseRecordProxy
}

func (p *Users) CollectionName() string {
	return "users"
}

func (p *Users) Name() string {
	return p.GetString("name")
}

func (p *Users) SetName(name string) {
	p.Set("name", name)
}

func (p *Users) Avatar() string {
	return p.GetString("avatar")
}

func (p *Users) SetAvatar(avatar string) {
	p.Set("avatar", avatar)
}

func (p *Users) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *Users) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

func (p *Users) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *Users) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

type TaxRates struct {
	core.BaseRecordProxy
}

func (p *TaxRates) CollectionName() string {
	return "tax_rates"
}

func (p *TaxRates) Description() string {
	return p.GetString("description")
}

func (p *TaxRates) SetDescription(description string) {
	p.Set("description", description)
}

func (p *TaxRates) Type() string {
	return p.GetString("type")
}

func (p *TaxRates) SetType(type_ string) {
	p.Set("type", type_)
}

func (p *TaxRates) Rate() float64 {
	return p.GetFloat("rate")
}

func (p *TaxRates) SetRate(rate float64) {
	p.Set("rate", rate)
}

func (p *TaxRates) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *TaxRates) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *TaxRates) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *TaxRates) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type Categories struct {
	core.BaseRecordProxy
}

func (p *Categories) CollectionName() string {
	return "categories"
}

func (p *Categories) Name() string {
	return p.GetString("name")
}

func (p *Categories) SetName(name string) {
	p.Set("name", name)
}

func (p *Categories) CategoryId() float64 {
	return p.GetFloat("category_id")
}

func (p *Categories) SetCategoryId(categoryId float64) {
	p.Set("category_id", categoryId)
}

func (p *Categories) Column() float64 {
	return p.GetFloat("column")
}

func (p *Categories) SetColumn(column float64) {
	p.Set("column", column)
}

func (p *Categories) Status() float64 {
	return p.GetFloat("status")
}

func (p *Categories) SetStatus(status float64) {
	p.Set("status", status)
}

func (p *Categories) SortOrder() float64 {
	return p.GetFloat("sort_order")
}

func (p *Categories) SetSortOrder(sortOrder float64) {
	p.Set("sort_order", sortOrder)
}

func (p *Categories) ShowInSuggested() float64 {
	return p.GetFloat("show_in_suggested")
}

func (p *Categories) SetShowInSuggested(showInSuggested float64) {
	p.Set("show_in_suggested", showInSuggested)
}

func (p *Categories) ImageUrl() string {
	return p.GetString("image_url")
}

func (p *Categories) SetImageUrl(imageUrl string) {
	p.Set("image_url", imageUrl)
}

func (p *Categories) Description() string {
	return p.GetString("description")
}

func (p *Categories) SetDescription(description string) {
	p.Set("description", description)
}

func (p *Categories) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *Categories) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *Categories) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *Categories) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type PaymentMethods struct {
	core.BaseRecordProxy
}

func (p *PaymentMethods) CollectionName() string {
	return "payment_methods"
}

func (p *PaymentMethods) Name() string {
	return p.GetString("name")
}

func (p *PaymentMethods) SetName(name string) {
	p.Set("name", name)
}

func (p *PaymentMethods) Type() string {
	return p.GetString("type")
}

func (p *PaymentMethods) SetType(type_ string) {
	p.Set("type", type_)
}

func (p *PaymentMethods) Status() bool {
	return p.GetBool("status")
}

func (p *PaymentMethods) SetStatus(status bool) {
	p.Set("status", status)
}

func (p *PaymentMethods) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *PaymentMethods) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *PaymentMethods) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *PaymentMethods) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type Options struct {
	core.BaseRecordProxy
}

func (p *Options) CollectionName() string {
	return "options"
}

func (p *Options) OptionId() float64 {
	return p.GetFloat("option_id")
}

func (p *Options) SetOptionId(optionId float64) {
	p.Set("option_id", optionId)
}

func (p *Options) Name() string {
	return p.GetString("name")
}

func (p *Options) SetName(name string) {
	p.Set("name", name)
}

func (p *Options) Type() string {
	return p.GetString("type")
}

func (p *Options) SetType(type_ string) {
	p.Set("type", type_)
}

func (p *Options) SortOrder() float64 {
	return p.GetFloat("sort_order")
}

func (p *Options) SetSortOrder(sortOrder float64) {
	p.Set("sort_order", sortOrder)
}

func (p *Options) Title() float64 {
	return p.GetFloat("title")
}

func (p *Options) SetTitle(title float64) {
	p.Set("title", title)
}

func (p *Options) OptionGroup() float64 {
	return p.GetFloat("option_group")
}

func (p *Options) SetOptionGroup(optionGroup float64) {
	p.Set("option_group", optionGroup)
}

func (p *Options) Required() float64 {
	return p.GetFloat("required")
}

func (p *Options) SetRequired(required float64) {
	p.Set("required", required)
}

func (p *Options) FreeOptionCount() float64 {
	return p.GetFloat("free_option_count")
}

func (p *Options) SetFreeOptionCount(freeOptionCount float64) {
	p.Set("free_option_count", freeOptionCount)
}

func (p *Options) MaxOptionCount() float64 {
	return p.GetFloat("max_option_count")
}

func (p *Options) SetMaxOptionCount(maxOptionCount float64) {
	p.Set("max_option_count", maxOptionCount)
}

func (p *Options) OptionDesc() string {
	return p.GetString("option_desc")
}

func (p *Options) SetOptionDesc(optionDesc string) {
	p.Set("option_desc", optionDesc)
}

func (p *Options) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *Options) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *Options) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *Options) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type OptionValues struct {
	core.BaseRecordProxy
}

func (p *OptionValues) CollectionName() string {
	return "option_values"
}

func (p *OptionValues) Option() *Options {
	var proxy *Options
	if rel := p.ExpandedOne("option"); rel != nil {
		proxy = &Options{}
		proxy.Record = rel
	}
	return proxy
}

func (p *OptionValues) SetOption(option *Options) {
	var id string
	if option != nil {
		id = option.Id
	}
	p.Record.Set("option", id)
	e := p.Expand()
	if option != nil {
		e["option"] = option.Record
	} else {
		delete(e, "option")
	}
	p.SetExpand(e)
}

func (p *OptionValues) OptionValueId() float64 {
	return p.GetFloat("option_value_id")
}

func (p *OptionValues) SetOptionValueId(optionValueId float64) {
	p.Set("option_value_id", optionValueId)
}

func (p *OptionValues) SortOrder() float64 {
	return p.GetFloat("sort_order")
}

func (p *OptionValues) SetSortOrder(sortOrder float64) {
	p.Set("sort_order", sortOrder)
}

func (p *OptionValues) RelatedOptionId() string {
	return p.GetString("related_option_id")
}

func (p *OptionValues) SetRelatedOptionId(relatedOptionId string) {
	p.Set("related_option_id", relatedOptionId)
}

func (p *OptionValues) PriceHt() float64 {
	return p.GetFloat("price_ht")
}

func (p *OptionValues) SetPriceHt(priceHt float64) {
	p.Set("price_ht", priceHt)
}

func (p *OptionValues) PriceTtc() float64 {
	return p.GetFloat("price_ttc")
}

func (p *OptionValues) SetPriceTtc(priceTtc float64) {
	p.Set("price_ttc", priceTtc)
}

func (p *OptionValues) TaxRate() *TaxRates {
	var proxy *TaxRates
	if rel := p.ExpandedOne("tax_rate"); rel != nil {
		proxy = &TaxRates{}
		proxy.Record = rel
	}
	return proxy
}

func (p *OptionValues) SetTaxRate(taxRate *TaxRates) {
	var id string
	if taxRate != nil {
		id = taxRate.Id
	}
	p.Record.Set("tax_rate", id)
	e := p.Expand()
	if taxRate != nil {
		e["tax_rate"] = taxRate.Record
	} else {
		delete(e, "tax_rate")
	}
	p.SetExpand(e)
}

func (p *OptionValues) PriceStatus() string {
	return p.GetString("price_status")
}

func (p *OptionValues) SetPriceStatus(priceStatus string) {
	p.Set("price_status", priceStatus)
}

func (p *OptionValues) Reset() float64 {
	return p.GetFloat("reset")
}

func (p *OptionValues) SetReset(reset float64) {
	p.Set("reset", reset)
}

func (p *OptionValues) Grup() string {
	return p.GetString("grup")
}

func (p *OptionValues) SetGrup(grup string) {
	p.Set("grup", grup)
}

func (p *OptionValues) Status() float64 {
	return p.GetFloat("status")
}

func (p *OptionValues) SetStatus(status float64) {
	p.Set("status", status)
}

func (p *OptionValues) NotRecommanded() float64 {
	return p.GetFloat("not_recommanded")
}

func (p *OptionValues) SetNotRecommanded(notRecommanded float64) {
	p.Set("not_recommanded", notRecommanded)
}

func (p *OptionValues) ImageType() float64 {
	return p.GetFloat("image_type")
}

func (p *OptionValues) SetImageType(imageType float64) {
	p.Set("image_type", imageType)
}

func (p *OptionValues) ImageUrl() string {
	return p.GetString("image_url")
}

func (p *OptionValues) SetImageUrl(imageUrl string) {
	p.Set("image_url", imageUrl)
}

func (p *OptionValues) Desc() string {
	return p.GetString("desc")
}

func (p *OptionValues) SetDesc(desc string) {
	p.Set("desc", desc)
}

func (p *OptionValues) Model() string {
	return p.GetString("model")
}

func (p *OptionValues) SetModel(model string) {
	p.Set("model", model)
}

func (p *OptionValues) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *OptionValues) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *OptionValues) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *OptionValues) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type Products struct {
	core.BaseRecordProxy
}

func (p *Products) CollectionName() string {
	return "products"
}

func (p *Products) ProductId() float64 {
	return p.GetFloat("product_id")
}

func (p *Products) SetProductId(productId float64) {
	p.Set("product_id", productId)
}

func (p *Products) Name() string {
	return p.GetString("name")
}

func (p *Products) SetName(name string) {
	p.Set("name", name)
}

func (p *Products) PriceHt() float64 {
	return p.GetFloat("price_ht")
}

func (p *Products) SetPriceHt(priceHt float64) {
	p.Set("price_ht", priceHt)
}

func (p *Products) PriceTtc() float64 {
	return p.GetFloat("price_ttc")
}

func (p *Products) SetPriceTtc(priceTtc float64) {
	p.Set("price_ttc", priceTtc)
}

func (p *Products) Status() float64 {
	return p.GetFloat("status")
}

func (p *Products) SetStatus(status float64) {
	p.Set("status", status)
}

func (p *Products) Private() float64 {
	return p.GetFloat("private")
}

func (p *Products) SetPrivate(private float64) {
	p.Set("private", private)
}

func (p *Products) ShowInSuggested() float64 {
	return p.GetFloat("show_in_suggested")
}

func (p *Products) SetShowInSuggested(showInSuggested float64) {
	p.Set("show_in_suggested", showInSuggested)
}

func (p *Products) Shipping() float64 {
	return p.GetFloat("shipping")
}

func (p *Products) SetShipping(shipping float64) {
	p.Set("shipping", shipping)
}

func (p *Products) CategoryId() float64 {
	return p.GetFloat("category_id")
}

func (p *Products) SetCategoryId(categoryId float64) {
	p.Set("category_id", categoryId)
}

func (p *Products) IsFullWidth() float64 {
	return p.GetFloat("isFullWidth")
}

func (p *Products) SetIsFullWidth(isFullWidth float64) {
	p.Set("isFullWidth", isFullWidth)
}

func (p *Products) SortOrder() float64 {
	return p.GetFloat("sort_order")
}

func (p *Products) SetSortOrder(sortOrder float64) {
	p.Set("sort_order", sortOrder)
}

func (p *Products) CSortOrder() float64 {
	return p.GetFloat("c_sort_order")
}

func (p *Products) SetCSortOrder(cSortOrder float64) {
	p.Set("c_sort_order", cSortOrder)
}

func (p *Products) ImageUrl() string {
	return p.GetString("image_url")
}

func (p *Products) SetImageUrl(imageUrl string) {
	p.Set("image_url", imageUrl)
}

func (p *Products) Related() string {
	return p.GetString("related")
}

func (p *Products) SetRelated(related string) {
	p.Set("related", related)
}

func (p *Products) Description() string {
	return p.GetString("description")
}

func (p *Products) SetDescription(description string) {
	p.Set("description", description)
}

func (p *Products) PrinterId() float64 {
	return p.GetFloat("printer_id")
}

func (p *Products) SetPrinterId(printerId float64) {
	p.Set("printer_id", printerId)
}

func (p *Products) PrinterIp() string {
	return p.GetString("printer_ip")
}

func (p *Products) SetPrinterIp(printerIp string) {
	p.Set("printer_ip", printerIp)
}

func (p *Products) PrinterPort() float64 {
	return p.GetFloat("printer_port")
}

func (p *Products) SetPrinterPort(printerPort float64) {
	p.Set("printer_port", printerPort)
}

func (p *Products) TemplateId() float64 {
	return p.GetFloat("template_id")
}

func (p *Products) SetTemplateId(templateId float64) {
	p.Set("template_id", templateId)
}

func (p *Products) LabelPrinterId() string {
	return p.GetString("label_printer_id")
}

func (p *Products) SetLabelPrinterId(labelPrinterId string) {
	p.Set("label_printer_id", labelPrinterId)
}

func (p *Products) Model() string {
	return p.GetString("model")
}

func (p *Products) SetModel(model string) {
	p.Set("model", model)
}

func (p *Products) TaxRate() *TaxRates {
	var proxy *TaxRates
	if rel := p.ExpandedOne("tax_rate"); rel != nil {
		proxy = &TaxRates{}
		proxy.Record = rel
	}
	return proxy
}

func (p *Products) SetTaxRate(taxRate *TaxRates) {
	var id string
	if taxRate != nil {
		id = taxRate.Id
	}
	p.Record.Set("tax_rate", id)
	e := p.Expand()
	if taxRate != nil {
		e["tax_rate"] = taxRate.Record
	} else {
		delete(e, "tax_rate")
	}
	p.SetExpand(e)
}

func (p *Products) Category() *Options {
	var proxy *Options
	if rel := p.ExpandedOne("category"); rel != nil {
		proxy = &Options{}
		proxy.Record = rel
	}
	return proxy
}

func (p *Products) SetCategory(category *Options) {
	var id string
	if category != nil {
		id = category.Id
	}
	p.Record.Set("category", id)
	e := p.Expand()
	if category != nil {
		e["category"] = category.Record
	} else {
		delete(e, "category")
	}
	p.SetExpand(e)
}

func (p *Products) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *Products) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *Products) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *Products) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type Customers struct {
	core.BaseRecordProxy
}

func (p *Customers) CollectionName() string {
	return "customers"
}

func (p *Customers) Firstname() string {
	return p.GetString("firstname")
}

func (p *Customers) SetFirstname(firstname string) {
	p.Set("firstname", firstname)
}

func (p *Customers) Lastname() string {
	return p.GetString("lastname")
}

func (p *Customers) SetLastname(lastname string) {
	p.Set("lastname", lastname)
}

func (p *Customers) Telephone() string {
	return p.GetString("telephone")
}

func (p *Customers) SetTelephone(telephone string) {
	p.Set("telephone", telephone)
}

func (p *Customers) Company() string {
	return p.GetString("company")
}

func (p *Customers) SetCompany(company string) {
	p.Set("company", company)
}

func (p *Customers) Address() string {
	return p.GetString("address")
}

func (p *Customers) SetAddress(address string) {
	p.Set("address", address)
}

func (p *Customers) Reward() string {
	return p.GetString("reward")
}

func (p *Customers) SetReward(reward string) {
	p.Set("reward", reward)
}

func (p *Customers) RewardHistory() string {
	return p.GetString("reward_history")
}

func (p *Customers) SetRewardHistory(rewardHistory string) {
	p.Set("reward_history", rewardHistory)
}

func (p *Customers) Model() string {
	return p.GetString("model")
}

func (p *Customers) SetModel(model string) {
	p.Set("model", model)
}

func (p *Customers) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *Customers) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *Customers) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *Customers) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type LiveOrders struct {
	core.BaseRecordProxy
}

func (p *LiveOrders) CollectionName() string {
	return "live_orders"
}

func (p *LiveOrders) LocalOrderId() float64 {
	return p.GetFloat("local_order_id")
}

func (p *LiveOrders) SetLocalOrderId(localOrderId float64) {
	p.Set("local_order_id", localOrderId)
}

func (p *LiveOrders) OrderNumber() float64 {
	return p.GetFloat("order_number")
}

func (p *LiveOrders) SetOrderNumber(orderNumber float64) {
	p.Set("order_number", orderNumber)
}

func (p *LiveOrders) RemoteOrderId() float64 {
	return p.GetFloat("remote_order_id")
}

func (p *LiveOrders) SetRemoteOrderId(remoteOrderId float64) {
	p.Set("remote_order_id", remoteOrderId)
}

func (p *LiveOrders) WebOrderNumber() float64 {
	return p.GetFloat("web_order_number")
}

func (p *LiveOrders) SetWebOrderNumber(webOrderNumber float64) {
	p.Set("web_order_number", webOrderNumber)
}

func (p *LiveOrders) Process() string {
	return p.GetString("process")
}

func (p *LiveOrders) SetProcess(process string) {
	p.Set("process", process)
}

func (p *LiveOrders) PosNumber() string {
	return p.GetString("pos_number")
}

func (p *LiveOrders) SetPosNumber(posNumber string) {
	p.Set("pos_number", posNumber)
}

func (p *LiveOrders) TotalTax() float64 {
	return p.GetFloat("total_tax")
}

func (p *LiveOrders) SetTotalTax(totalTax float64) {
	p.Set("total_tax", totalTax)
}

func (p *LiveOrders) TotalWTax() float64 {
	return p.GetFloat("total_w_tax")
}

func (p *LiveOrders) SetTotalWTax(totalWTax float64) {
	p.Set("total_w_tax", totalWTax)
}

func (p *LiveOrders) TotalDiscount() float64 {
	return p.GetFloat("total_discount")
}

func (p *LiveOrders) SetTotalDiscount(totalDiscount float64) {
	p.Set("total_discount", totalDiscount)
}

func (p *LiveOrders) Remainder() float64 {
	return p.GetFloat("remainder")
}

func (p *LiveOrders) SetRemainder(remainder float64) {
	p.Set("remainder", remainder)
}

func (p *LiveOrders) Caissier() string {
	return p.GetString("caissier")
}

func (p *LiveOrders) SetCaissier(caissier string) {
	p.Set("caissier", caissier)
}

func (p *LiveOrders) OrderStatusId() string {
	return p.GetString("order_status_id")
}

func (p *LiveOrders) SetOrderStatusId(orderStatusId string) {
	p.Set("order_status_id", orderStatusId)
}

func (p *LiveOrders) TableNo() string {
	return p.GetString("table_no")
}

func (p *LiveOrders) SetTableNo(tableNo string) {
	p.Set("table_no", tableNo)
}

func (p *LiveOrders) DeliveryTime() string {
	return p.GetString("delivery_time")
}

func (p *LiveOrders) SetDeliveryTime(deliveryTime string) {
	p.Set("delivery_time", deliveryTime)
}

func (p *LiveOrders) DeliveryMinute() string {
	return p.GetString("delivery_minute")
}

func (p *LiveOrders) SetDeliveryMinute(deliveryMinute string) {
	p.Set("delivery_minute", deliveryMinute)
}

func (p *LiveOrders) OrderTime() string {
	return p.GetString("order_time")
}

func (p *LiveOrders) SetOrderTime(orderTime string) {
	p.Set("order_time", orderTime)
}

func (p *LiveOrders) OrderCustomer() string {
	return p.GetString("order_customer")
}

func (p *LiveOrders) SetOrderCustomer(orderCustomer string) {
	p.Set("order_customer", orderCustomer)
}

func (p *LiveOrders) Date() string {
	return p.GetString("date")
}

func (p *LiveOrders) SetDate(date string) {
	p.Set("date", date)
}

func (p *LiveOrders) Name() string {
	return p.GetString("name")
}

func (p *LiveOrders) SetName(name string) {
	p.Set("name", name)
}

func (p *LiveOrders) ShippingFirstname() string {
	return p.GetString("shipping_firstname")
}

func (p *LiveOrders) SetShippingFirstname(shippingFirstname string) {
	p.Set("shipping_firstname", shippingFirstname)
}

func (p *LiveOrders) IsMerged() bool {
	return p.GetBool("is_merged")
}

func (p *LiveOrders) SetIsMerged(isMerged bool) {
	p.Set("is_merged", isMerged)
}

func (p *LiveOrders) MergedOrders() string {
	return p.GetString("merged_orders")
}

func (p *LiveOrders) SetMergedOrders(mergedOrders string) {
	p.Set("merged_orders", mergedOrders)
}

func (p *LiveOrders) MergedLocalIds() string {
	return p.GetString("merged_local_ids")
}

func (p *LiveOrders) SetMergedLocalIds(mergedLocalIds string) {
	p.Set("merged_local_ids", mergedLocalIds)
}

func (p *LiveOrders) Customer() *Customers {
	var proxy *Customers
	if rel := p.ExpandedOne("customer"); rel != nil {
		proxy = &Customers{}
		proxy.Record = rel
	}
	return proxy
}

func (p *LiveOrders) SetCustomer(customer *Customers) {
	var id string
	if customer != nil {
		id = customer.Id
	}
	p.Record.Set("customer", id)
	e := p.Expand()
	if customer != nil {
		e["customer"] = customer.Record
	} else {
		delete(e, "customer")
	}
	p.SetExpand(e)
}

func (p *LiveOrders) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *LiveOrders) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *LiveOrders) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *LiveOrders) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type LiveOrderProducts struct {
	core.BaseRecordProxy
}

func (p *LiveOrderProducts) CollectionName() string {
	return "live_order_products"
}

func (p *LiveOrderProducts) LiveOrder() *LiveOrders {
	var proxy *LiveOrders
	if rel := p.ExpandedOne("live_order"); rel != nil {
		proxy = &LiveOrders{}
		proxy.Record = rel
	}
	return proxy
}

func (p *LiveOrderProducts) SetLiveOrder(liveOrder *LiveOrders) {
	var id string
	if liveOrder != nil {
		id = liveOrder.Id
	}
	p.Record.Set("live_order", id)
	e := p.Expand()
	if liveOrder != nil {
		e["live_order"] = liveOrder.Record
	} else {
		delete(e, "live_order")
	}
	p.SetExpand(e)
}

func (p *LiveOrderProducts) LocalOrderId() float64 {
	return p.GetFloat("local_order_id")
}

func (p *LiveOrderProducts) SetLocalOrderId(localOrderId float64) {
	p.Set("local_order_id", localOrderId)
}

func (p *LiveOrderProducts) ProductId() float64 {
	return p.GetFloat("product_id")
}

func (p *LiveOrderProducts) SetProductId(productId float64) {
	p.Set("product_id", productId)
}

func (p *LiveOrderProducts) Unit() string {
	return p.GetString("unit")
}

func (p *LiveOrderProducts) SetUnit(unit string) {
	p.Set("unit", unit)
}

func (p *LiveOrderProducts) Status() bool {
	return p.GetBool("status")
}

func (p *LiveOrderProducts) SetStatus(status bool) {
	p.Set("status", status)
}

func (p *LiveOrderProducts) QuantityUnit() float64 {
	return p.GetFloat("quantity_unit")
}

func (p *LiveOrderProducts) SetQuantityUnit(quantityUnit float64) {
	p.Set("quantity_unit", quantityUnit)
}

func (p *LiveOrderProducts) UpriceWTax() float64 {
	return p.GetFloat("uprice_w_tax")
}

func (p *LiveOrderProducts) SetUpriceWTax(upriceWTax float64) {
	p.Set("uprice_w_tax", upriceWTax)
}

func (p *LiveOrderProducts) UpriceStandart() float64 {
	return p.GetFloat("uprice_standart")
}

func (p *LiveOrderProducts) SetUpriceStandart(upriceStandart float64) {
	p.Set("uprice_standart", upriceStandart)
}

func (p *LiveOrderProducts) PrixRevt() float64 {
	return p.GetFloat("prix_revt")
}

func (p *LiveOrderProducts) SetPrixRevt(prixRevt float64) {
	p.Set("prix_revt", prixRevt)
}

func (p *LiveOrderProducts) TotalRowTax() float64 {
	return p.GetFloat("total_row_tax")
}

func (p *LiveOrderProducts) SetTotalRowTax(totalRowTax float64) {
	p.Set("total_row_tax", totalRowTax)
}

func (p *LiveOrderProducts) TotalRowWTax() float64 {
	return p.GetFloat("total_row_w_tax")
}

func (p *LiveOrderProducts) SetTotalRowWTax(totalRowWTax float64) {
	p.Set("total_row_w_tax", totalRowWTax)
}

func (p *LiveOrderProducts) TaxRate() *TaxRates {
	var proxy *TaxRates
	if rel := p.ExpandedOne("tax_rate"); rel != nil {
		proxy = &TaxRates{}
		proxy.Record = rel
	}
	return proxy
}

func (p *LiveOrderProducts) SetTaxRate(taxRate *TaxRates) {
	var id string
	if taxRate != nil {
		id = taxRate.Id
	}
	p.Record.Set("tax_rate", id)
	e := p.Expand()
	if taxRate != nil {
		e["tax_rate"] = taxRate.Record
	} else {
		delete(e, "tax_rate")
	}
	p.SetExpand(e)
}

func (p *LiveOrderProducts) CreatedBy() string {
	return p.GetString("created_by")
}

func (p *LiveOrderProducts) SetCreatedBy(createdBy string) {
	p.Set("created_by", createdBy)
}

func (p *LiveOrderProducts) UpdatedBy() string {
	return p.GetString("updated_by")
}

func (p *LiveOrderProducts) SetUpdatedBy(updatedBy string) {
	p.Set("updated_by", updatedBy)
}

func (p *LiveOrderProducts) Name() string {
	return p.GetString("name")
}

func (p *LiveOrderProducts) SetName(name string) {
	p.Set("name", name)
}

func (p *LiveOrderProducts) Image() string {
	return p.GetString("image")
}

func (p *LiveOrderProducts) SetImage(image string) {
	p.Set("image", image)
}

func (p *LiveOrderProducts) Customer() *Customers {
	var proxy *Customers
	if rel := p.ExpandedOne("customer"); rel != nil {
		proxy = &Customers{}
		proxy.Record = rel
	}
	return proxy
}

func (p *LiveOrderProducts) SetCustomer(customer *Customers) {
	var id string
	if customer != nil {
		id = customer.Id
	}
	p.Record.Set("customer", id)
	e := p.Expand()
	if customer != nil {
		e["customer"] = customer.Record
	} else {
		delete(e, "customer")
	}
	p.SetExpand(e)
}

func (p *LiveOrderProducts) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *LiveOrderProducts) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *LiveOrderProducts) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *LiveOrderProducts) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type LiveOrderProductOptions struct {
	core.BaseRecordProxy
}

func (p *LiveOrderProductOptions) CollectionName() string {
	return "live_order_product_options"
}

func (p *LiveOrderProductOptions) LiveOrder() *LiveOrderProducts {
	var proxy *LiveOrderProducts
	if rel := p.ExpandedOne("live_order"); rel != nil {
		proxy = &LiveOrderProducts{}
		proxy.Record = rel
	}
	return proxy
}

func (p *LiveOrderProductOptions) SetLiveOrder(liveOrder *LiveOrderProducts) {
	var id string
	if liveOrder != nil {
		id = liveOrder.Id
	}
	p.Record.Set("live_order", id)
	e := p.Expand()
	if liveOrder != nil {
		e["live_order"] = liveOrder.Record
	} else {
		delete(e, "live_order")
	}
	p.SetExpand(e)
}

func (p *LiveOrderProductOptions) LiveOrderProduct() *LiveOrderProducts {
	var proxy *LiveOrderProducts
	if rel := p.ExpandedOne("live_order_product"); rel != nil {
		proxy = &LiveOrderProducts{}
		proxy.Record = rel
	}
	return proxy
}

func (p *LiveOrderProductOptions) SetLiveOrderProduct(liveOrderProduct *LiveOrderProducts) {
	var id string
	if liveOrderProduct != nil {
		id = liveOrderProduct.Id
	}
	p.Record.Set("live_order_product", id)
	e := p.Expand()
	if liveOrderProduct != nil {
		e["live_order_product"] = liveOrderProduct.Record
	} else {
		delete(e, "live_order_product")
	}
	p.SetExpand(e)
}

func (p *LiveOrderProductOptions) LocalOrderId() float64 {
	return p.GetFloat("local_order_id")
}

func (p *LiveOrderProductOptions) SetLocalOrderId(localOrderId float64) {
	p.Set("local_order_id", localOrderId)
}

func (p *LiveOrderProductOptions) Status() bool {
	return p.GetBool("status")
}

func (p *LiveOrderProductOptions) SetStatus(status bool) {
	p.Set("status", status)
}

func (p *LiveOrderProductOptions) ProductId() float64 {
	return p.GetFloat("product_id")
}

func (p *LiveOrderProductOptions) SetProductId(productId float64) {
	p.Set("product_id", productId)
}

func (p *LiveOrderProductOptions) OptionId() float64 {
	return p.GetFloat("option_id")
}

func (p *LiveOrderProductOptions) SetOptionId(optionId float64) {
	p.Set("option_id", optionId)
}

func (p *LiveOrderProductOptions) OptionValueId() float64 {
	return p.GetFloat("option_value_id")
}

func (p *LiveOrderProductOptions) SetOptionValueId(optionValueId float64) {
	p.Set("option_value_id", optionValueId)
}

func (p *LiveOrderProductOptions) Unit() string {
	return p.GetString("unit")
}

func (p *LiveOrderProductOptions) SetUnit(unit string) {
	p.Set("unit", unit)
}

func (p *LiveOrderProductOptions) QuantityUnit() float64 {
	return p.GetFloat("quantity_unit")
}

func (p *LiveOrderProductOptions) SetQuantityUnit(quantityUnit float64) {
	p.Set("quantity_unit", quantityUnit)
}

func (p *LiveOrderProductOptions) UpriceWTax() float64 {
	return p.GetFloat("uprice_w_tax")
}

func (p *LiveOrderProductOptions) SetUpriceWTax(upriceWTax float64) {
	p.Set("uprice_w_tax", upriceWTax)
}

func (p *LiveOrderProductOptions) UpriceStandart() float64 {
	return p.GetFloat("uprice_standart")
}

func (p *LiveOrderProductOptions) SetUpriceStandart(upriceStandart float64) {
	p.Set("uprice_standart", upriceStandart)
}

func (p *LiveOrderProductOptions) PrixRevt() float64 {
	return p.GetFloat("prix_revt")
}

func (p *LiveOrderProductOptions) SetPrixRevt(prixRevt float64) {
	p.Set("prix_revt", prixRevt)
}

func (p *LiveOrderProductOptions) TotalRowTax() float64 {
	return p.GetFloat("total_row_tax")
}

func (p *LiveOrderProductOptions) SetTotalRowTax(totalRowTax float64) {
	p.Set("total_row_tax", totalRowTax)
}

func (p *LiveOrderProductOptions) TotalRowWTax() float64 {
	return p.GetFloat("total_row_w_tax")
}

func (p *LiveOrderProductOptions) SetTotalRowWTax(totalRowWTax float64) {
	p.Set("total_row_w_tax", totalRowWTax)
}

func (p *LiveOrderProductOptions) TaxRate() *TaxRates {
	var proxy *TaxRates
	if rel := p.ExpandedOne("tax_rate"); rel != nil {
		proxy = &TaxRates{}
		proxy.Record = rel
	}
	return proxy
}

func (p *LiveOrderProductOptions) SetTaxRate(taxRate *TaxRates) {
	var id string
	if taxRate != nil {
		id = taxRate.Id
	}
	p.Record.Set("tax_rate", id)
	e := p.Expand()
	if taxRate != nil {
		e["tax_rate"] = taxRate.Record
	} else {
		delete(e, "tax_rate")
	}
	p.SetExpand(e)
}

func (p *LiveOrderProductOptions) CreatedBy() string {
	return p.GetString("created_by")
}

func (p *LiveOrderProductOptions) SetCreatedBy(createdBy string) {
	p.Set("created_by", createdBy)
}

func (p *LiveOrderProductOptions) UpdatedBy() string {
	return p.GetString("updated_by")
}

func (p *LiveOrderProductOptions) SetUpdatedBy(updatedBy string) {
	p.Set("updated_by", updatedBy)
}

func (p *LiveOrderProductOptions) Name() string {
	return p.GetString("name")
}

func (p *LiveOrderProductOptions) SetName(name string) {
	p.Set("name", name)
}

func (p *LiveOrderProductOptions) Image() string {
	return p.GetString("image")
}

func (p *LiveOrderProductOptions) SetImage(image string) {
	p.Set("image", image)
}

func (p *LiveOrderProductOptions) Customer() *Customers {
	var proxy *Customers
	if rel := p.ExpandedOne("customer"); rel != nil {
		proxy = &Customers{}
		proxy.Record = rel
	}
	return proxy
}

func (p *LiveOrderProductOptions) SetCustomer(customer *Customers) {
	var id string
	if customer != nil {
		id = customer.Id
	}
	p.Record.Set("customer", id)
	e := p.Expand()
	if customer != nil {
		e["customer"] = customer.Record
	} else {
		delete(e, "customer")
	}
	p.SetExpand(e)
}

func (p *LiveOrderProductOptions) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *LiveOrderProductOptions) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *LiveOrderProductOptions) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *LiveOrderProductOptions) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type Tickets struct {
	core.BaseRecordProxy
}

func (p *Tickets) CollectionName() string {
	return "tickets"
}

func (p *Tickets) TicketId() float64 {
	return p.GetFloat("ticket_id")
}

func (p *Tickets) SetTicketId(ticketId float64) {
	p.Set("ticket_id", ticketId)
}

func (p *Tickets) TicketNo() float64 {
	return p.GetFloat("ticket_no")
}

func (p *Tickets) SetTicketNo(ticketNo float64) {
	p.Set("ticket_no", ticketNo)
}

func (p *Tickets) OrderNumber() float64 {
	return p.GetFloat("order_number")
}

func (p *Tickets) SetOrderNumber(orderNumber float64) {
	p.Set("order_number", orderNumber)
}

func (p *Tickets) WebOrderNumber() float64 {
	return p.GetFloat("web_order_number")
}

func (p *Tickets) SetWebOrderNumber(webOrderNumber float64) {
	p.Set("web_order_number", webOrderNumber)
}

func (p *Tickets) TicketDatetime() string {
	return p.GetString("ticket_datetime")
}

func (p *Tickets) SetTicketDatetime(ticketDatetime string) {
	p.Set("ticket_datetime", ticketDatetime)
}

func (p *Tickets) Caissier() string {
	return p.GetString("caissier")
}

func (p *Tickets) SetCaissier(caissier string) {
	p.Set("caissier", caissier)
}

func (p *Tickets) TotalAmountHt() float64 {
	return p.GetFloat("total_amount_ht")
}

func (p *Tickets) SetTotalAmountHt(totalAmountHt float64) {
	p.Set("total_amount_ht", totalAmountHt)
}

func (p *Tickets) TotalTaxAmount() float64 {
	return p.GetFloat("total_tax_amount")
}

func (p *Tickets) SetTotalTaxAmount(totalTaxAmount float64) {
	p.Set("total_tax_amount", totalTaxAmount)
}

func (p *Tickets) TotalAmountTtc() float64 {
	return p.GetFloat("total_amount_ttc")
}

func (p *Tickets) SetTotalAmountTtc(totalAmountTtc float64) {
	p.Set("total_amount_ttc", totalAmountTtc)
}

func (p *Tickets) PreviousRecordHash() string {
	return p.GetString("previous_record_hash")
}

func (p *Tickets) SetPreviousRecordHash(previousRecordHash string) {
	p.Set("previous_record_hash", previousRecordHash)
}

func (p *Tickets) CurrentRecordHash() string {
	return p.GetString("current_record_hash")
}

func (p *Tickets) SetCurrentRecordHash(currentRecordHash string) {
	p.Set("current_record_hash", currentRecordHash)
}

func (p *Tickets) Model() string {
	return p.GetString("model")
}

func (p *Tickets) SetModel(model string) {
	p.Set("model", model)
}

func (p *Tickets) Customer() *Customers {
	var proxy *Customers
	if rel := p.ExpandedOne("customer"); rel != nil {
		proxy = &Customers{}
		proxy.Record = rel
	}
	return proxy
}

func (p *Tickets) SetCustomer(customer *Customers) {
	var id string
	if customer != nil {
		id = customer.Id
	}
	p.Record.Set("customer", id)
	e := p.Expand()
	if customer != nil {
		e["customer"] = customer.Record
	} else {
		delete(e, "customer")
	}
	p.SetExpand(e)
}

func (p *Tickets) CustomerFullname() string {
	return p.GetString("customer_fullname")
}

func (p *Tickets) SetCustomerFullname(customerFullname string) {
	p.Set("customer_fullname", customerFullname)
}

func (p *Tickets) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *Tickets) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *Tickets) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *Tickets) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type TicketLines struct {
	core.BaseRecordProxy
}

func (p *TicketLines) CollectionName() string {
	return "ticket_lines"
}

func (p *TicketLines) Ticket() *Tickets {
	var proxy *Tickets
	if rel := p.ExpandedOne("ticket"); rel != nil {
		proxy = &Tickets{}
		proxy.Record = rel
	}
	return proxy
}

func (p *TicketLines) SetTicket(ticket *Tickets) {
	var id string
	if ticket != nil {
		id = ticket.Id
	}
	p.Record.Set("ticket", id)
	e := p.Expand()
	if ticket != nil {
		e["ticket"] = ticket.Record
	} else {
		delete(e, "ticket")
	}
	p.SetExpand(e)
}

func (p *TicketLines) Product() *Products {
	var proxy *Products
	if rel := p.ExpandedOne("product"); rel != nil {
		proxy = &Products{}
		proxy.Record = rel
	}
	return proxy
}

func (p *TicketLines) SetProduct(product *Products) {
	var id string
	if product != nil {
		id = product.Id
	}
	p.Record.Set("product", id)
	e := p.Expand()
	if product != nil {
		e["product"] = product.Record
	} else {
		delete(e, "product")
	}
	p.SetExpand(e)
}

func (p *TicketLines) Unit() string {
	return p.GetString("unit")
}

func (p *TicketLines) SetUnit(unit string) {
	p.Set("unit", unit)
}

func (p *TicketLines) QuantityUnit() float64 {
	return p.GetFloat("quantity_unit")
}

func (p *TicketLines) SetQuantityUnit(quantityUnit float64) {
	p.Set("quantity_unit", quantityUnit)
}

func (p *TicketLines) BasePriceHt() float64 {
	return p.GetFloat("base_price_ht")
}

func (p *TicketLines) SetBasePriceHt(basePriceHt float64) {
	p.Set("base_price_ht", basePriceHt)
}

func (p *TicketLines) BaseTaxRate() float64 {
	return p.GetFloat("base_tax_rate")
}

func (p *TicketLines) SetBaseTaxRate(baseTaxRate float64) {
	p.Set("base_tax_rate", baseTaxRate)
}

func (p *TicketLines) ChosenOptions() string {
	return p.GetString("chosen_options")
}

func (p *TicketLines) SetChosenOptions(chosenOptions string) {
	p.Set("chosen_options", chosenOptions)
}

func (p *TicketLines) CalculatedTotalHt() float64 {
	return p.GetFloat("calculated_total_ht")
}

func (p *TicketLines) SetCalculatedTotalHt(calculatedTotalHt float64) {
	p.Set("calculated_total_ht", calculatedTotalHt)
}

func (p *TicketLines) CalculatedTotalTax() float64 {
	return p.GetFloat("calculated_total_tax")
}

func (p *TicketLines) SetCalculatedTotalTax(calculatedTotalTax float64) {
	p.Set("calculated_total_tax", calculatedTotalTax)
}

func (p *TicketLines) CalculatedTotalTtc() float64 {
	return p.GetFloat("calculated_total_ttc")
}

func (p *TicketLines) SetCalculatedTotalTtc(calculatedTotalTtc float64) {
	p.Set("calculated_total_ttc", calculatedTotalTtc)
}

func (p *TicketLines) TotalTaxAmount() float64 {
	return p.GetFloat("total_tax_amount")
}

func (p *TicketLines) SetTotalTaxAmount(totalTaxAmount float64) {
	p.Set("total_tax_amount", totalTaxAmount)
}

func (p *TicketLines) TotalAmountTtc() float64 {
	return p.GetFloat("total_amount_ttc")
}

func (p *TicketLines) SetTotalAmountTtc(totalAmountTtc float64) {
	p.Set("total_amount_ttc", totalAmountTtc)
}

func (p *TicketLines) PreviousRecordHash() string {
	return p.GetString("previous_record_hash")
}

func (p *TicketLines) SetPreviousRecordHash(previousRecordHash string) {
	p.Set("previous_record_hash", previousRecordHash)
}

func (p *TicketLines) CurrentRecordHash() string {
	return p.GetString("current_record_hash")
}

func (p *TicketLines) SetCurrentRecordHash(currentRecordHash string) {
	p.Set("current_record_hash", currentRecordHash)
}

func (p *TicketLines) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *TicketLines) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *TicketLines) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *TicketLines) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type ReturnTypeSelectType int

const (
	Return ReturnTypeSelectType = iota
	Cancellation
	Other
)

var zzReturnTypeSelectTypeSelectNameMap = map[string]ReturnTypeSelectType{
	"RETURN":       0,
	"CANCELLATION": 1,
	"OTHER":        2,
}
var zzReturnTypeSelectTypeSelectIotaMap = map[ReturnTypeSelectType]string{
	0: "RETURN",
	1: "CANCELLATION",
	2: "OTHER",
}

type Returns struct {
	core.BaseRecordProxy
}

func (p *Returns) CollectionName() string {
	return "returns"
}

func (p *Returns) OriginalTicket() *Tickets {
	var proxy *Tickets
	if rel := p.ExpandedOne("original_ticket"); rel != nil {
		proxy = &Tickets{}
		proxy.Record = rel
	}
	return proxy
}

func (p *Returns) SetOriginalTicket(originalTicket *Tickets) {
	var id string
	if originalTicket != nil {
		id = originalTicket.Id
	}
	p.Record.Set("original_ticket", id)
	e := p.Expand()
	if originalTicket != nil {
		e["original_ticket"] = originalTicket.Record
	} else {
		delete(e, "original_ticket")
	}
	p.SetExpand(e)
}

func (p *Returns) TicketNo() float64 {
	return p.GetFloat("ticket_no")
}

func (p *Returns) SetTicketNo(ticketNo float64) {
	p.Set("ticket_no", ticketNo)
}

func (p *Returns) ReturnType() ReturnTypeSelectType {
	option := p.GetString("return_type")
	i, ok := zzReturnTypeSelectTypeSelectNameMap[option]
	if !ok {
		panic("Unknown select value")
	}
	return i
}

func (p *Returns) SetReturnType(returnType ReturnTypeSelectType) {
	i, ok := zzReturnTypeSelectTypeSelectIotaMap[returnType]
	if !ok {
		panic("Unknown select value")
	}
	p.Set("return_type", i)
}

func (p *Returns) ReturnDatetime() string {
	return p.GetString("return_datetime")
}

func (p *Returns) SetReturnDatetime(returnDatetime string) {
	p.Set("return_datetime", returnDatetime)
}

func (p *Returns) TotalAmountHtReturned() float64 {
	return p.GetFloat("total_amount_ht_returned")
}

func (p *Returns) SetTotalAmountHtReturned(totalAmountHtReturned float64) {
	p.Set("total_amount_ht_returned", totalAmountHtReturned)
}

func (p *Returns) TotalTaxAmountReturned() float64 {
	return p.GetFloat("total_tax_amount_returned")
}

func (p *Returns) SetTotalTaxAmountReturned(totalTaxAmountReturned float64) {
	p.Set("total_tax_amount_returned", totalTaxAmountReturned)
}

func (p *Returns) TotalAmountTtcReturned() float64 {
	return p.GetFloat("total_amount_ttc_returned")
}

func (p *Returns) SetTotalAmountTtcReturned(totalAmountTtcReturned float64) {
	p.Set("total_amount_ttc_returned", totalAmountTtcReturned)
}

func (p *Returns) PreviousRecordHash() string {
	return p.GetString("previous_record_hash")
}

func (p *Returns) SetPreviousRecordHash(previousRecordHash string) {
	p.Set("previous_record_hash", previousRecordHash)
}

func (p *Returns) CurrentRecordHash() string {
	return p.GetString("current_record_hash")
}

func (p *Returns) SetCurrentRecordHash(currentRecordHash string) {
	p.Set("current_record_hash", currentRecordHash)
}

func (p *Returns) Customer() *Customers {
	var proxy *Customers
	if rel := p.ExpandedOne("customer"); rel != nil {
		proxy = &Customers{}
		proxy.Record = rel
	}
	return proxy
}

func (p *Returns) SetCustomer(customer *Customers) {
	var id string
	if customer != nil {
		id = customer.Id
	}
	p.Record.Set("customer", id)
	e := p.Expand()
	if customer != nil {
		e["customer"] = customer.Record
	} else {
		delete(e, "customer")
	}
	p.SetExpand(e)
}

func (p *Returns) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *Returns) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *Returns) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *Returns) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type ReturnItems struct {
	core.BaseRecordProxy
}

func (p *ReturnItems) CollectionName() string {
	return "return_items"
}

func (p *ReturnItems) ReturnRecord() *Returns {
	var proxy *Returns
	if rel := p.ExpandedOne("return_record"); rel != nil {
		proxy = &Returns{}
		proxy.Record = rel
	}
	return proxy
}

func (p *ReturnItems) SetReturnRecord(returnRecord *Returns) {
	var id string
	if returnRecord != nil {
		id = returnRecord.Id
	}
	p.Record.Set("return_record", id)
	e := p.Expand()
	if returnRecord != nil {
		e["return_record"] = returnRecord.Record
	} else {
		delete(e, "return_record")
	}
	p.SetExpand(e)
}

func (p *ReturnItems) OriginalTicketLine() *TicketLines {
	var proxy *TicketLines
	if rel := p.ExpandedOne("original_ticket_line"); rel != nil {
		proxy = &TicketLines{}
		proxy.Record = rel
	}
	return proxy
}

func (p *ReturnItems) SetOriginalTicketLine(originalTicketLine *TicketLines) {
	var id string
	if originalTicketLine != nil {
		id = originalTicketLine.Id
	}
	p.Record.Set("original_ticket_line", id)
	e := p.Expand()
	if originalTicketLine != nil {
		e["original_ticket_line"] = originalTicketLine.Record
	} else {
		delete(e, "original_ticket_line")
	}
	p.SetExpand(e)
}

func (p *ReturnItems) Unit() string {
	return p.GetString("unit")
}

func (p *ReturnItems) SetUnit(unit string) {
	p.Set("unit", unit)
}

func (p *ReturnItems) QuantityUnitReturned() float64 {
	return p.GetFloat("quantity_unit_returned")
}

func (p *ReturnItems) SetQuantityUnitReturned(quantityUnitReturned float64) {
	p.Set("quantity_unit_returned", quantityUnitReturned)
}

func (p *ReturnItems) TotalHtReturned() float64 {
	return p.GetFloat("total_ht_returned")
}

func (p *ReturnItems) SetTotalHtReturned(totalHtReturned float64) {
	p.Set("total_ht_returned", totalHtReturned)
}

func (p *ReturnItems) TotalTaxReturned() float64 {
	return p.GetFloat("total_tax_returned")
}

func (p *ReturnItems) SetTotalTaxReturned(totalTaxReturned float64) {
	p.Set("total_tax_returned", totalTaxReturned)
}

func (p *ReturnItems) TotalTtcReturned() float64 {
	return p.GetFloat("total_ttc_returned")
}

func (p *ReturnItems) SetTotalTtcReturned(totalTtcReturned float64) {
	p.Set("total_ttc_returned", totalTtcReturned)
}

func (p *ReturnItems) PreviousRecordHash() string {
	return p.GetString("previous_record_hash")
}

func (p *ReturnItems) SetPreviousRecordHash(previousRecordHash string) {
	p.Set("previous_record_hash", previousRecordHash)
}

func (p *ReturnItems) CurrentRecordHash() string {
	return p.GetString("current_record_hash")
}

func (p *ReturnItems) SetCurrentRecordHash(currentRecordHash string) {
	p.Set("current_record_hash", currentRecordHash)
}

func (p *ReturnItems) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *ReturnItems) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *ReturnItems) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *ReturnItems) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type Payments struct {
	core.BaseRecordProxy
}

func (p *Payments) CollectionName() string {
	return "payments"
}

func (p *Payments) PaymentMethod() *PaymentMethods {
	var proxy *PaymentMethods
	if rel := p.ExpandedOne("payment_method"); rel != nil {
		proxy = &PaymentMethods{}
		proxy.Record = rel
	}
	return proxy
}

func (p *Payments) SetPaymentMethod(paymentMethod *PaymentMethods) {
	var id string
	if paymentMethod != nil {
		id = paymentMethod.Id
	}
	p.Record.Set("payment_method", id)
	e := p.Expand()
	if paymentMethod != nil {
		e["payment_method"] = paymentMethod.Record
	} else {
		delete(e, "payment_method")
	}
	p.SetExpand(e)
}

func (p *Payments) PaymentDatetime() string {
	return p.GetString("payment_datetime")
}

func (p *Payments) SetPaymentDatetime(paymentDatetime string) {
	p.Set("payment_datetime", paymentDatetime)
}

func (p *Payments) Currency() string {
	return p.GetString("currency")
}

func (p *Payments) SetCurrency(currency string) {
	p.Set("currency", currency)
}

func (p *Payments) TransactionReference() string {
	return p.GetString("transaction_reference")
}

func (p *Payments) SetTransactionReference(transactionReference string) {
	p.Set("transaction_reference", transactionReference)
}

func (p *Payments) Amount() float64 {
	return p.GetFloat("amount")
}

func (p *Payments) SetAmount(amount float64) {
	p.Set("amount", amount)
}

func (p *Payments) CashReceived() float64 {
	return p.GetFloat("cash_received")
}

func (p *Payments) SetCashReceived(cashReceived float64) {
	p.Set("cash_received", cashReceived)
}

func (p *Payments) CashChangeGiven() float64 {
	return p.GetFloat("cash_change_given")
}

func (p *Payments) SetCashChangeGiven(cashChangeGiven float64) {
	p.Set("cash_change_given", cashChangeGiven)
}

func (p *Payments) TotalTaxAmountReturned() float64 {
	return p.GetFloat("total_tax_amount_returned")
}

func (p *Payments) SetTotalTaxAmountReturned(totalTaxAmountReturned float64) {
	p.Set("total_tax_amount_returned", totalTaxAmountReturned)
}

func (p *Payments) TotalAmountTtcReturned() float64 {
	return p.GetFloat("total_amount_ttc_returned")
}

func (p *Payments) SetTotalAmountTtcReturned(totalAmountTtcReturned float64) {
	p.Set("total_amount_ttc_returned", totalAmountTtcReturned)
}

func (p *Payments) PreviousRecordHash() string {
	return p.GetString("previous_record_hash")
}

func (p *Payments) SetPreviousRecordHash(previousRecordHash string) {
	p.Set("previous_record_hash", previousRecordHash)
}

func (p *Payments) CurrentRecordHash() string {
	return p.GetString("current_record_hash")
}

func (p *Payments) SetCurrentRecordHash(currentRecordHash string) {
	p.Set("current_record_hash", currentRecordHash)
}

func (p *Payments) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *Payments) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *Payments) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *Payments) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type AuditLogs struct {
	core.BaseRecordProxy
}

func (p *AuditLogs) CollectionName() string {
	return "audit_logs"
}

func (p *AuditLogs) Timestamp() string {
	return p.GetString("timestamp")
}

func (p *AuditLogs) SetTimestamp(timestamp string) {
	p.Set("timestamp", timestamp)
}

func (p *AuditLogs) User() *Users {
	var proxy *Users
	if rel := p.ExpandedOne("user"); rel != nil {
		proxy = &Users{}
		proxy.Record = rel
	}
	return proxy
}

func (p *AuditLogs) SetUser(user *Users) {
	var id string
	if user != nil {
		id = user.Id
	}
	p.Record.Set("user", id)
	e := p.Expand()
	if user != nil {
		e["user"] = user.Record
	} else {
		delete(e, "user")
	}
	p.SetExpand(e)
}

func (p *AuditLogs) Action() string {
	return p.GetString("action")
}

func (p *AuditLogs) SetAction(action string) {
	p.Set("action", action)
}

func (p *AuditLogs) Details() string {
	return p.GetString("details")
}

func (p *AuditLogs) SetDetails(details string) {
	p.Set("details", details)
}

func (p *AuditLogs) PreviousRecordHash() string {
	return p.GetString("previous_record_hash")
}

func (p *AuditLogs) SetPreviousRecordHash(previousRecordHash string) {
	p.Set("previous_record_hash", previousRecordHash)
}

func (p *AuditLogs) CurrentRecordHash() string {
	return p.GetString("current_record_hash")
}

func (p *AuditLogs) SetCurrentRecordHash(currentRecordHash string) {
	p.Set("current_record_hash", currentRecordHash)
}

func (p *AuditLogs) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *AuditLogs) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *AuditLogs) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *AuditLogs) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type ReportingTicketLineOptions struct {
	core.BaseRecordProxy
}

func (p *ReportingTicketLineOptions) CollectionName() string {
	return "reporting_ticket_line_options"
}

func (p *ReportingTicketLineOptions) Ticket() *Tickets {
	var proxy *Tickets
	if rel := p.ExpandedOne("ticket"); rel != nil {
		proxy = &Tickets{}
		proxy.Record = rel
	}
	return proxy
}

func (p *ReportingTicketLineOptions) SetTicket(ticket *Tickets) {
	var id string
	if ticket != nil {
		id = ticket.Id
	}
	p.Record.Set("ticket", id)
	e := p.Expand()
	if ticket != nil {
		e["ticket"] = ticket.Record
	} else {
		delete(e, "ticket")
	}
	p.SetExpand(e)
}

func (p *ReportingTicketLineOptions) TicketLine() *TicketLines {
	var proxy *TicketLines
	if rel := p.ExpandedOne("ticket_line"); rel != nil {
		proxy = &TicketLines{}
		proxy.Record = rel
	}
	return proxy
}

func (p *ReportingTicketLineOptions) SetTicketLine(ticketLine *TicketLines) {
	var id string
	if ticketLine != nil {
		id = ticketLine.Id
	}
	p.Record.Set("ticket_line", id)
	e := p.Expand()
	if ticketLine != nil {
		e["ticket_line"] = ticketLine.Record
	} else {
		delete(e, "ticket_line")
	}
	p.SetExpand(e)
}

func (p *ReportingTicketLineOptions) OptionValue() *OptionValues {
	var proxy *OptionValues
	if rel := p.ExpandedOne("option_value"); rel != nil {
		proxy = &OptionValues{}
		proxy.Record = rel
	}
	return proxy
}

func (p *ReportingTicketLineOptions) SetOptionValue(optionValue *OptionValues) {
	var id string
	if optionValue != nil {
		id = optionValue.Id
	}
	p.Record.Set("option_value", id)
	e := p.Expand()
	if optionValue != nil {
		e["option_value"] = optionValue.Record
	} else {
		delete(e, "option_value")
	}
	p.SetExpand(e)
}

func (p *ReportingTicketLineOptions) Name() string {
	return p.GetString("name")
}

func (p *ReportingTicketLineOptions) SetName(name string) {
	p.Set("name", name)
}

func (p *ReportingTicketLineOptions) PriceTtc() float64 {
	return p.GetFloat("price_ttc")
}

func (p *ReportingTicketLineOptions) SetPriceTtc(priceTtc float64) {
	p.Set("price_ttc", priceTtc)
}

func (p *ReportingTicketLineOptions) Unit() string {
	return p.GetString("unit")
}

func (p *ReportingTicketLineOptions) SetUnit(unit string) {
	p.Set("unit", unit)
}

func (p *ReportingTicketLineOptions) QuantityUnit() float64 {
	return p.GetFloat("quantity_unit")
}

func (p *ReportingTicketLineOptions) SetQuantityUnit(quantityUnit float64) {
	p.Set("quantity_unit", quantityUnit)
}

func (p *ReportingTicketLineOptions) TotalTtc() float64 {
	return p.GetFloat("total_ttc")
}

func (p *ReportingTicketLineOptions) SetTotalTtc(totalTtc float64) {
	p.Set("total_ttc", totalTtc)
}

func (p *ReportingTicketLineOptions) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *ReportingTicketLineOptions) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *ReportingTicketLineOptions) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *ReportingTicketLineOptions) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

type ClosuresReports struct {
	core.BaseRecordProxy
}

func (p *ClosuresReports) CollectionName() string {
	return "closures_reports"
}

func (p *ClosuresReports) Timestamp() string {
	return p.GetString("timestamp")
}

func (p *ClosuresReports) SetTimestamp(timestamp string) {
	p.Set("timestamp", timestamp)
}

func (p *ClosuresReports) User() *Users {
	var proxy *Users
	if rel := p.ExpandedOne("user"); rel != nil {
		proxy = &Users{}
		proxy.Record = rel
	}
	return proxy
}

func (p *ClosuresReports) SetUser(user *Users) {
	var id string
	if user != nil {
		id = user.Id
	}
	p.Record.Set("user", id)
	e := p.Expand()
	if user != nil {
		e["user"] = user.Record
	} else {
		delete(e, "user")
	}
	p.SetExpand(e)
}

func (p *ClosuresReports) Action() string {
	return p.GetString("action")
}

func (p *ClosuresReports) SetAction(action string) {
	p.Set("action", action)
}

func (p *ClosuresReports) Details() string {
	return p.GetString("details")
}

func (p *ClosuresReports) SetDetails(details string) {
	p.Set("details", details)
}

func (p *ClosuresReports) PreviousRecordHash() string {
	return p.GetString("previous_record_hash")
}

func (p *ClosuresReports) SetPreviousRecordHash(previousRecordHash string) {
	p.Set("previous_record_hash", previousRecordHash)
}

func (p *ClosuresReports) CurrentRecordHash() string {
	return p.GetString("current_record_hash")
}

func (p *ClosuresReports) SetCurrentRecordHash(currentRecordHash string) {
	p.Set("current_record_hash", currentRecordHash)
}

func (p *ClosuresReports) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *ClosuresReports) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

func (p *ClosuresReports) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *ClosuresReports) SetCreated(created types.DateTime) {
	p.Set("created", created)
}
